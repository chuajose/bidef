<?php defined('BASEPATH') OR exit('No direct script access allowed');

/**
 * Example
 *
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array.
 *
 * @package		CodeIgniter
 * @subpackage	Rest Server
 * @category	Controller
 * @author		Phil Sturgeon
 * @link		http://philsturgeon.co.uk/code/
*/

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
require APPPATH.'/libraries/REST_Controller.php';

class Operaciones extends REST_Controller
{

    function prueba_get()
    {

        $errores = array('campo'=>'prueba', 'msg'=>'mete prueba');
        $this->response(array('errores'=>$errores), 200);

    }
	function guardar_post()
	{
		$this->load->helper('operaciones_helper');
        $operaciones=new operaciones_helper();
        $datos =(array)json_decode($this->post('myData'));
        $compras = $operaciones->guardar($datos);
	}

	function index_get() {

		/* if(!$this->get('id'))
        {
            $this->response(NULL, 400);
        }*/
        //Cargo el usuario para comprobar funcionamiento, sino se cargaria en el login
       // $this->load->helper('usuario_helper');
        //$this->usuarioAplicacion= new usuario();

        if(!$this->usuarioAplicacion->id_usuario){

             $this->response(NULL, 403);
        }

        $this->load->helper('operaciones_helper');

        $operaciones=new operaciones_helper();

        $compras = $operaciones->compras(0,15);

        $ventas = $operaciones->ventas(0,15);


		$this->response(array('compras'=>$compras,'ventas'=>$ventas), 200);
	}

    //ver operacion 
    //
    function ver_get(){

        if(!$this->get('id'))
        {
            $this->response(NULL, 400);
        }

		$this->load->helper('operaciones_helper');
        $operaciones=new operaciones_helper($this->get('id'));

        //Si el usuario logueado no pertenece a la empresa compradora o vendedora respondo un error 400
        if($this->usuarioAplicacion->id_empresa !== $operaciones->fid_empresa_v && $this->usuarioAplicacion->id_empresa !== $operaciones->fid_empresa_c) {

            $this->response(NULL, 403);

        }

        $ficheros = $this->operaciones_model->ficheros_operacion($operaciones->id_operacion);

        $documentos = array();

        if ($ficheros) {

            foreach ($ficheros as $fichero) {
                
                $doc = new fichero ($fichero->fid_fichero);
                $documentos [] = array( 'fichero' => $doc->nombre(),'ruta'=>'api/'.$doc->ruta().$doc->fichero());
            }
        }
       

        $empresa_compradora = new empresa($operaciones->fid_empresa_c);
        $empresa_vendedora = new empresa($operaciones->fid_empresa_v);
        $moneda = $this->general_model->ver_moneda($operaciones->moneda);
        $config_estado=$this->config->item('operaciones');
        $estado_txt=$config_estado['operaciones']['estado'][$operaciones->estado];



        $datos = array(

            'id_operacion'       => $operaciones->id_operacion,
            'concepto'           => $operaciones->concepto,
            'referencia'         => $operaciones->referencia,
            'empresa_compradora' => $empresa_compradora->razon_social,
            'empresa_vendedora'  => $empresa_vendedora->razon_social,
            'fid_empresa_c'      => $operaciones->fid_empresa_c,
            'fid_empresa_v'      => $operaciones->fid_empresa_v,
            'importe'            => $operaciones->importe,
            'id_moneda'          => $operaciones->moneda,
            'moneda'             => $moneda['simbolo'],
            'fecha_inicio'       => $operaciones->fecha_inicio,
            'fecha_fin'          => $operaciones->fecha_fin,
            'estado'             => $operaciones->estado,
            'estado_txt'         => $estado_txt,
            'documentos'         => $documentos

        );

       // $cliente = new empresa($operaciones->fid_empresa_c);
       // $operaciones->cliente=$cliente->razon_social;

		$this->response(array('operacion'=>$datos), 200);

    }

    function ver_post()
    {

        $msg="";
        if(!$this->usuarioAplicacion->id_usuario){

             $this->response(NULL, 403);
        }


        $datos =(array)json_decode($this->post('model'));

        //Si el tipo es un pago
        if($datos['tipo']==1){

            $datos['fid_empresa_c']=$this->usuarioAplicacion->id_empresa;
            $datos['fid_usuario_c']=$this->usuarioAplicacion->id_usuario;

        } elseif ($datos['tipo']==0) {
            //si el tipo es una factura
            $datos['fid_empresa_v']=$this->usuarioAplicacion->id_empresa;
            $datos['fid_usuario_v']=$this->usuarioAplicacion->id_usuario;
        }
        
        //var_dump($datos);
        $this->load->helper('operaciones_helper');
        $operaciones=new operaciones_helper();

        //Geenramos datos 
        if(!empty($datos))
        {
            foreach ($datos as $key => $value) {
               $_POST[$key]=$value;
            }
        }
        //$this->load->model('operaciones_model');
        if($datos['tipo']==1){

            $id_operacion = $operaciones->add_pago();

        } elseif ($datos['tipo']==0) {
            //si el tipo es una factura
            $id_operacion = $operaciones->add_factura();
        }

        if(!is_numeric($id_operacion)){

            $this->response(array('operacion'=>array(),'msg'=>$id_operacion), 200);
        }

        $operaciones=new operaciones_helper($id_operacion);
        $empresa_compradora = new empresa($operaciones->fid_empresa_c);
        $empresa_vendedora = new empresa($operaciones->fid_empresa_v);
        $moneda = $this->general_model->ver_moneda($operaciones->moneda);
        $config_estado=$this->config->item('operaciones');
        $estado_txt=$config_estado['operaciones']['estado'][$operaciones->estado];
        //$this->response(array('operacion'=>$datos), 200);
        $datos = array(

            'id_operacion'       => $operaciones->id_operacion,
            'concepto'           => $operaciones->concepto,
            'referencia'         => $operaciones->referencia,
            'empresa_compradora' => $empresa_compradora->razon_social,
            'empresa_vendedora'  => $empresa_vendedora->razon_social,
            'fid_empresa_c'      => $operaciones->fid_empresa_c,
            'fid_empresa_v'      => $operaciones->fid_empresa_v,
            'importe'            => $operaciones->importe,
            'id_moneda'          => $operaciones->moneda,
            'moneda'             => $moneda['simbolo'],
            'fecha_inicio'       => $operaciones->fecha_inicio,
            'fecha_fin'          => $operaciones->fecha_fin,
            'estado'             => $operaciones->estado,
            'estado_txt'         => $estado_txt

        );

       // $cliente = new empresa($operaciones->fid_empresa_c);
       // $operaciones->cliente=$cliente->razon_social;

        $this->response(array('operacion'=>$datos,'msg'=>$msg), 200);
    }

    function operaciones_get(){

        if(!$this->get('id'))
        {
           // $this->response(NULL, 400);
        }
	
		$this->response(array('error'=>'Sin datos'), 200);

    }


    function realizar_pago_post($id_operacion=FALSE,$id_empresa=FALSE)
    {


        $this->load->helper('operaciones_helper');

        $id_operacion = $this->post('id_operacion');

        $id_empresa = $this->post('id_empresa');

        if($id_empresa) {

            $empresa = new empresa($id_empresa);

            if(!$empresa->id_empresa) return false;

        }

        //Si el pago ya existe 
        if($id_operacion) {

            $operaciones = new operaciones_helper($id_operacion);

            if(!$operaciones->id_operacion || $operaciones->estado==1) $this->response(NULL, 400);

            $cliente_operacion = new usuario($operaciones->fid_empresa_v);

            $empleados = new empresa ($this->usuarioAplicacion->id_empresa);

            $empleados = $empleados->ver_empleados();

            unset($empleados[$this->usuarioAplicacion->id_usuario]);

            if($this->usuarioAplicacion->id_empresa==$operaciones->fid_empresa_c) {

                $importe_2 = $operaciones->importe_c;
                $moneda = $this->general_model->ver_moneda($operaciones->moneda_c);
                $moneda_2 = $moneda['simbolo'];
            } else {
                $importe_2 = $operaciones->importe_v;
                $moneda = $this->general_model->ver_moneda($operaciones->moneda_v);
                $moneda_2 = $moneda['simbolo'];
            }
            $moneda = $this->general_model->ver_moneda($operaciones->moneda);
            $moneda = $moneda['simbolo'];

            $operacion = array(
                'importe'      => $operaciones->importe,
                'moneda'       => $moneda,
                'importe_2'    => $importe_2,
                'moneda_2'     => $moneda_2,
                'cliente'      => $cliente_operacion->razon_social,
                'id_operacion' => $operaciones->id_operacion,
                'action'       => BASE_URL.'operaciones/realizar_pago/'.$id_operacion,
                'empleados'    => $empleados,
                'ventas'       => ''
                );

           // var_dump($operacion);
            if ($_POST) {

                $pagar = $operaciones->realizar_pago();

                if ($pagar) {

                    $msg = "pagado";

                } else {

                    $msg = "error";
                }


                $this->response(array('mensaje'=>$msg,'error'=>0), 200);

            }


        } else {
            //Si no existe el pago se muestra el formulario
            $operaciones = new operaciones_helper();

            $formulario = $operaciones->formulario_pago($id_operacion, $id_empresa);

            //Si el formulario se envia con errores
            if(!$formulario) {

                $campos=array();

                foreach ($this->form_validation->field_data() as $key => $value) {

                    $campos[]=$key;

                }

                $this->response(array('html'=>'error'), 200);

            } 

            if($operaciones->error)  $this->response(array('html'=>'error'), 200);


        }

       

        $this->response(array('html'=>'final'), 200);
       
    }

    function monedas_get()
    {

        $monedas = $this->general_model->cargar_result('moneda');
        $moneda=array();
        if($monedas) {

            foreach ($monedas as  $mon) {
               
                $moneda[]=array('id_moneda'=>$mon->id_moneda,'nombre'=>$mon->nombre,'simbolo'=>$mon->simbolo);
            }
        }

        $this->response(array('monedas'=>$moneda), 200);
    }


}
